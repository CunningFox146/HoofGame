//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/_Core/Input/Gameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace HoofGame.InputActions
{
    public partial class @GameplayInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameplayInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gameplay"",
    ""maps"": [
        {
            ""name"": ""Start"",
            ""id"": ""678682b8-2823-45da-b789-146047ec0012"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""6ed992e3-de26-4a5d-9ea7-1868c635ba18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f798b56-297e-45f6-a502-20a9190f08e5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15415bb5-26f9-42e4-b059-5ba54a61f924"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hoove"",
            ""id"": ""a63bf469-b1fb-40f6-9e7a-f0e0970d0f68"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""4a1f93cc-7cf1-47b4-aa9d-3dc37ae7ee59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""d7be2b66-095d-4f6c-b0e8-ac137a0025f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2c71663-6ab4-45a4-91db-0ee810ea03a9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2744b9a0-224b-4570-90f6-7bdb8490dcde"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6e3a684-2651-4fa7-9f41-81ab426c84c7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83bae6bc-d7aa-441c-a784-4dafbb39cdf2"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Start
            m_Start = asset.FindActionMap("Start", throwIfNotFound: true);
            m_Start_Click = m_Start.FindAction("Click", throwIfNotFound: true);
            // Hoove
            m_Hoove = asset.FindActionMap("Hoove", throwIfNotFound: true);
            m_Hoove_Position = m_Hoove.FindAction("Position", throwIfNotFound: true);
            m_Hoove_Click = m_Hoove.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Start
        private readonly InputActionMap m_Start;
        private IStartActions m_StartActionsCallbackInterface;
        private readonly InputAction m_Start_Click;
        public struct StartActions
        {
            private @GameplayInputActions m_Wrapper;
            public StartActions(@GameplayInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_Start_Click;
            public InputActionMap Get() { return m_Wrapper.m_Start; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StartActions set) { return set.Get(); }
            public void SetCallbacks(IStartActions instance)
            {
                if (m_Wrapper.m_StartActionsCallbackInterface != null)
                {
                    @Click.started -= m_Wrapper.m_StartActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_StartActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_StartActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_StartActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public StartActions @Start => new StartActions(this);

        // Hoove
        private readonly InputActionMap m_Hoove;
        private IHooveActions m_HooveActionsCallbackInterface;
        private readonly InputAction m_Hoove_Position;
        private readonly InputAction m_Hoove_Click;
        public struct HooveActions
        {
            private @GameplayInputActions m_Wrapper;
            public HooveActions(@GameplayInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Hoove_Position;
            public InputAction @Click => m_Wrapper.m_Hoove_Click;
            public InputActionMap Get() { return m_Wrapper.m_Hoove; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HooveActions set) { return set.Get(); }
            public void SetCallbacks(IHooveActions instance)
            {
                if (m_Wrapper.m_HooveActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_HooveActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_HooveActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_HooveActionsCallbackInterface.OnPosition;
                    @Click.started -= m_Wrapper.m_HooveActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_HooveActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_HooveActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_HooveActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public HooveActions @Hoove => new HooveActions(this);
        public interface IStartActions
        {
            void OnClick(InputAction.CallbackContext context);
        }
        public interface IHooveActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
